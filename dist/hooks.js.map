{"version":3,"file":"hooks.js","sources":["../src/hooks/useStorage.ts"],"sourcesContent":["/**\n * useLocalStorage Hook - Persistent state with localStorage\n * @module @voilajsx/uikit\n * @file src/hooks/useStorage.ts\n */\n\nimport { useState, useEffect, useCallback } from 'react';\n\n/**\n * @llm-rule Storage hook for persisting state to localStorage\n * Handles SSR, JSON parsing errors, and storage unavailability\n */\n\nexport type UseLocalStorageReturn<T> = [\n  value: T,\n  setValue: (value: T | ((prev: T) => T)) => void,\n  removeValue: () => void\n];\n\n/**\n * Hook to persist state in localStorage with automatic JSON serialization\n *\n * @param key - localStorage key\n * @param initialValue - Default value if no stored value exists\n * @returns [value, setValue, removeValue] tuple\n *\n * @example\n * ```tsx\n * const [user, setUser, removeUser] = useLocalStorage('user', null);\n * const [settings, setSettings] = useLocalStorage('settings', { theme: 'light' });\n *\n * // Update value\n * setUser({ name: 'John', email: 'john@example.com' });\n *\n * // Remove value (resets to initialValue)\n * removeUser();\n * ```\n */\nexport function useLocalStorage<T>(\n  key: string,\n  initialValue: T\n): UseLocalStorageReturn<T> {\n  // Get from local storage then parse stored json or return initialValue\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    if (typeof window === 'undefined') {\n      // SSR: return initial value\n      return initialValue;\n    }\n\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.warn(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that persists the new value to localStorage\n  const setValue = useCallback(\n    (value: T | ((prev: T) => T)) => {\n      try {\n        // Allow value to be a function so we have the same API as useState\n        const valueToStore = value instanceof Function ? value(storedValue) : value;\n\n        // Save state\n        setStoredValue(valueToStore);\n\n        // Save to local storage\n        if (typeof window !== 'undefined') {\n          window.localStorage.setItem(key, JSON.stringify(valueToStore));\n        }\n      } catch (error) {\n        console.error(`Error setting localStorage key \"${key}\":`, error);\n      }\n    },\n    [key, storedValue]\n  );\n\n  // Remove value from localStorage and reset to initial value\n  const removeValue = useCallback(() => {\n    try {\n      setStoredValue(initialValue);\n      if (typeof window !== 'undefined') {\n        window.localStorage.removeItem(key);\n      }\n    } catch (error) {\n      console.error(`Error removing localStorage key \"${key}\":`, error);\n    }\n  }, [key, initialValue]);\n\n  // Listen for storage changes from other tabs\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === key && e.newValue !== null) {\n        try {\n          setStoredValue(JSON.parse(e.newValue));\n        } catch (error) {\n          console.warn(`Error parsing storage event for key \"${key}\":`, error);\n        }\n      } else if (e.key === key && e.newValue === null) {\n        // Key was removed\n        setStoredValue(initialValue);\n      }\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, [key, initialValue]);\n\n  return [storedValue, setValue, removeValue];\n}"],"names":["useLocalStorage","key","initialValue","storedValue","setStoredValue","useState","item","error","setValue","useCallback","value","valueToStore","removeValue","useEffect","handleStorageChange","e"],"mappings":";;AAsCO,SAASA,EACdC,GACAC,GAC0B;AAE1B,QAAM,CAACC,GAAaC,CAAc,IAAIC,EAAY,MAAM;AACtD,QAAI,OAAO,SAAW;AAEpB,aAAOH;AAGT,QAAI;AACF,YAAMI,IAAO,OAAO,aAAa,QAAQL,CAAG;AAC5C,aAAOK,IAAO,KAAK,MAAMA,CAAI,IAAIJ;AAAA,IACnC,SAASK,GAAO;AACd,qBAAQ,KAAK,mCAAmCN,CAAG,MAAMM,CAAK,GACvDL;AAAA,IACT;AAAA,EACF,CAAC,GAGKM,IAAWC;AAAA,IACf,CAACC,MAAgC;AAC/B,UAAI;AAEF,cAAMC,IAAeD,aAAiB,WAAWA,EAAMP,CAAW,IAAIO;AAGtE,QAAAN,EAAeO,CAAY,GAGvB,OAAO,SAAW,OACpB,OAAO,aAAa,QAAQV,GAAK,KAAK,UAAUU,CAAY,CAAC;AAAA,MAEjE,SAASJ,GAAO;AACd,gBAAQ,MAAM,mCAAmCN,CAAG,MAAMM,CAAK;AAAA,MACjE;AAAA,IACF;AAAA,IACA,CAACN,GAAKE,CAAW;AAAA,EAAA,GAIbS,IAAcH,EAAY,MAAM;AACpC,QAAI;AACF,MAAAL,EAAeF,CAAY,GACvB,OAAO,SAAW,OACpB,OAAO,aAAa,WAAWD,CAAG;AAAA,IAEtC,SAASM,GAAO;AACd,cAAQ,MAAM,oCAAoCN,CAAG,MAAMM,CAAK;AAAA,IAClE;AAAA,EACF,GAAG,CAACN,GAAKC,CAAY,CAAC;AAGtB,SAAAW,EAAU,MAAM;AACd,QAAI,OAAO,SAAW,IAAa;AAEnC,UAAMC,IAAsB,CAACC,MAAoB;AAC/C,UAAIA,EAAE,QAAQd,KAAOc,EAAE,aAAa;AAClC,YAAI;AACF,UAAAX,EAAe,KAAK,MAAMW,EAAE,QAAQ,CAAC;AAAA,QACvC,SAASR,GAAO;AACd,kBAAQ,KAAK,wCAAwCN,CAAG,MAAMM,CAAK;AAAA,QACrE;AAAA,WACSQ,EAAE,QAAQd,KAAOc,EAAE,aAAa,QAEzCX,EAAeF,CAAY;AAAA,IAE/B;AAEA,kBAAO,iBAAiB,WAAWY,CAAmB,GAC/C,MAAM,OAAO,oBAAoB,WAAWA,CAAmB;AAAA,EACxE,GAAG,CAACb,GAAKC,CAAY,CAAC,GAEf,CAACC,GAAaK,GAAUI,CAAW;AAC5C;"}