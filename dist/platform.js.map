{"version":3,"file":"platform.js","sources":["../src/lib/platform.ts"],"sourcesContent":["/**\n * @fileoverview Platform detection utilities for @voilajsx/uikit\n * @description Detects runtime platform for adaptive component rendering with TypeScript support\n * @package @voilajsx/uikit\n * @file /src/lib/platform.ts\n */\n\n/**\n * Extend Window interface to include Tauri globals\n */\ndeclare global {\n  interface Window {\n    __TAURI__?: any;\n    __TAURI_IPC__?: any;\n    __TAURI_INVOKE__?: any;\n  }\n}\n\n/**\n * Available platforms enum for type safety\n */\nexport const PLATFORMS = {\n  WEB: 'web',\n  NATIVE: 'native',\n  TAURI: 'tauri',\n  UNKNOWN: 'unknown',\n} as const;\n\n/**\n * Platform type derived from PLATFORMS values\n */\nexport type Platform = typeof PLATFORMS[keyof typeof PLATFORMS];\n\n/**\n * Browser information interface\n */\nexport interface BrowserInfo {\n  name: string;\n  version: string;\n  platform: Platform;\n}\n\n/**\n * Platform capabilities interface\n */\nexport interface PlatformCapabilities {\n  hasClipboard: boolean;\n  hasNotifications: boolean;\n  hasGeolocation: boolean;\n  hasCamera: boolean;\n  hasFileSystem: boolean;\n  hasLocalStorage: boolean;\n  hasWebGL: boolean;\n}\n\n/**\n * Detects the current platform with type safety\n * @returns {Platform} Platform identifier from PLATFORMS\n */\nexport function detectPlatform(): Platform {\n  // Check if we're in a browser environment\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    // Check for Tauri\n    if (\n      window.__TAURI__ !== undefined || \n      window.__TAURI_IPC__ !== undefined ||\n      window.__TAURI_INVOKE__ !== undefined\n    ) {\n      return PLATFORMS.TAURI;\n    }\n    return PLATFORMS.WEB;\n  }\n\n  // Check for React Native\n  if (\n    typeof navigator !== 'undefined' && \n    navigator.product === 'ReactNative'\n  ) {\n    return PLATFORMS.NATIVE;\n  }\n\n  // Check for Node.js environment\n  if (\n    typeof process !== 'undefined' && \n    process.versions && \n    process.versions.node\n  ) {\n    return PLATFORMS.UNKNOWN;\n  }\n\n  return PLATFORMS.UNKNOWN;\n}\n\n/**\n * Determines if code is running in browser environment\n * @returns {boolean} True if running in browser\n */\nexport function isBrowser(): boolean {\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\n\n/**\n * Determines if code is running in React Native environment\n * @returns {boolean} True if running in React Native\n */\nexport function isNative(): boolean {\n  return (\n    typeof navigator !== 'undefined' && \n    navigator.product === 'ReactNative'\n  );\n}\n\n/**\n * Determines if code is running in Tauri environment\n * @returns {boolean} True if running in Tauri\n */\nexport function isTauri(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    (\n      window.__TAURI__ !== undefined || \n      window.__TAURI_IPC__ !== undefined ||\n      window.__TAURI_INVOKE__ !== undefined\n    )\n  );\n}\n\n/**\n * Determines if code is running in Node.js environment\n * @returns {boolean} True if running in Node.js\n */\nexport function isNode(): boolean {\n  return (\n    typeof process !== 'undefined' && \n    process.versions && \n    process.versions.node !== undefined\n  );\n}\n\n/**\n * Determines if code is running server-side (SSR)\n * @returns {boolean} True if running server-side\n */\nexport function isSSR(): boolean {\n  return typeof window === 'undefined';\n}\n\n/**\n * Gets basic browser information\n * @returns {BrowserInfo} Browser information object\n */\nexport function getBrowserInfo(): BrowserInfo {\n  if (!isBrowser()) {\n    return {\n      name: 'Unknown',\n      version: 'Unknown',\n      platform: PLATFORMS.UNKNOWN,\n    };\n  }\n\n  const userAgent = navigator.userAgent;\n  let name = 'Unknown';\n  let version = 'Unknown';\n\n  // Detect browser name and version\n  if (userAgent.includes('Chrome') && !userAgent.includes('Edg')) {\n    name = 'Chrome';\n    const match = userAgent.match(/Chrome\\/(\\d+)/);\n    version = match ? match[1] : 'Unknown';\n  } else if (userAgent.includes('Firefox')) {\n    name = 'Firefox';\n    const match = userAgent.match(/Firefox\\/(\\d+)/);\n    version = match ? match[1] : 'Unknown';\n  } else if (userAgent.includes('Safari') && !userAgent.includes('Chrome')) {\n    name = 'Safari';\n    const match = userAgent.match(/Version\\/(\\d+)/);\n    version = match ? match[1] : 'Unknown';\n  } else if (userAgent.includes('Edg')) {\n    name = 'Edge';\n    const match = userAgent.match(/Edg\\/(\\d+)/);\n    version = match ? match[1] : 'Unknown';\n  }\n\n  return {\n    name,\n    version,\n    platform: detectPlatform(),\n  };\n}\n\n/**\n * Detects platform capabilities\n * @returns {PlatformCapabilities} Object describing platform capabilities\n */\nexport function getPlatformCapabilities(): PlatformCapabilities {\n  if (!isBrowser()) {\n    return {\n      hasClipboard: false,\n      hasNotifications: false,\n      hasGeolocation: false,\n      hasCamera: false,\n      hasFileSystem: false,\n      hasLocalStorage: false,\n      hasWebGL: false,\n    };\n  }\n\n  return {\n    hasClipboard: 'clipboard' in navigator,\n    hasNotifications: 'Notification' in window,\n    hasGeolocation: 'geolocation' in navigator,\n    hasCamera: 'mediaDevices' in navigator && 'getUserMedia' in navigator.mediaDevices,\n    hasFileSystem: 'showOpenFilePicker' in window,\n    hasLocalStorage: (() => {\n      try {\n        const test = '__storage_test__';\n        localStorage.setItem(test, test);\n        localStorage.removeItem(test);\n        return true;\n      } catch {\n        return false;\n      }\n    })(),\n    hasWebGL: (() => {\n      try {\n        const canvas = document.createElement('canvas');\n        return !!(\n          canvas.getContext('webgl') || \n          canvas.getContext('experimental-webgl')\n        );\n      } catch {\n        return false;\n      }\n    })(),\n  };\n}\n\n/**\n * Gets the operating system from user agent\n * @returns {string} Operating system name\n */\nexport function getOperatingSystem(): string {\n  if (!isBrowser()) return 'Unknown';\n\n  const userAgent = navigator.userAgent;\n  \n  if (userAgent.includes('Win')) return 'Windows';\n  if (userAgent.includes('Mac')) return 'macOS';\n  if (userAgent.includes('Linux')) return 'Linux';\n  if (userAgent.includes('Android')) return 'Android';\n  if (userAgent.includes('iPhone') || userAgent.includes('iPad')) return 'iOS';\n  \n  return 'Unknown';\n}\n\n/**\n * Checks if the current device is mobile\n * @returns {boolean} True if running on mobile device\n */\nexport function isMobile(): boolean {\n  if (!isBrowser()) return false;\n\n  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n    navigator.userAgent\n  );\n}\n\n/**\n * Checks if the current device is tablet\n * @returns {boolean} True if running on tablet device\n */\nexport function isTablet(): boolean {\n  if (!isBrowser()) return false;\n\n  return /iPad|Android(?!.*Mobile)/i.test(navigator.userAgent);\n}\n\n/**\n * Checks if the current device is desktop\n * @returns {boolean} True if running on desktop device\n */\nexport function isDesktop(): boolean {\n  return !isMobile() && !isTablet();\n}\n\n/**\n * Gets device type\n * @returns {'mobile' | 'tablet' | 'desktop' | 'unknown'} Device type\n */\nexport function getDeviceType(): 'mobile' | 'tablet' | 'desktop' | 'unknown' {\n  if (!isBrowser()) return 'unknown';\n  \n  if (isMobile()) return 'mobile';\n  if (isTablet()) return 'tablet';\n  if (isDesktop()) return 'desktop';\n  \n  return 'unknown';\n}\n\n/**\n * Checks if the current browser supports a specific feature\n * @param {string} feature - Feature name to check\n * @returns {boolean} True if feature is supported\n */\nexport function supportsFeature(feature: string): boolean {\n  if (!isBrowser()) return false;\n\n  const features: Record<string, () => boolean> = {\n    webgl: () => {\n      try {\n        const canvas = document.createElement('canvas');\n        return !!(canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n      } catch {\n        return false;\n      }\n    },\n    webgl2: () => {\n      try {\n        const canvas = document.createElement('canvas');\n        return !!canvas.getContext('webgl2');\n      } catch {\n        return false;\n      }\n    },\n    webrtc: () => 'RTCPeerConnection' in window,\n    websockets: () => 'WebSocket' in window,\n    serviceworker: () => 'serviceWorker' in navigator,\n    indexeddb: () => 'indexedDB' in window,\n    localstorage: () => {\n      try {\n        const test = '__test__';\n        localStorage.setItem(test, test);\n        localStorage.removeItem(test);\n        return true;\n      } catch {\n        return false;\n      }\n    },\n    clipboard: () => 'clipboard' in navigator,\n    notifications: () => 'Notification' in window,\n    geolocation: () => 'geolocation' in navigator,\n    camera: () => 'mediaDevices' in navigator && 'getUserMedia' in navigator.mediaDevices,\n    filesystem: () => 'showOpenFilePicker' in window,\n  };\n\n  const checker = features[feature.toLowerCase()];\n  return checker ? checker() : false;\n}\n\n/**\n * Platform-specific utility object\n */\nexport const platform = {\n  // Core detection\n  detect: detectPlatform,\n  is: {\n    browser: isBrowser,\n    native: isNative,\n    tauri: isTauri,\n    node: isNode,\n    ssr: isSSR,\n  },\n  \n  // Device detection\n  device: {\n    isMobile,\n    isTablet,\n    isDesktop,\n    getType: getDeviceType,\n  },\n  \n  // Browser info\n  browser: {\n    getInfo: getBrowserInfo,\n    getOS: getOperatingSystem,\n  },\n  \n  // Capabilities\n  capabilities: getPlatformCapabilities,\n  supports: supportsFeature,\n  \n  // Constants\n  PLATFORMS,\n} as const;\n\n/**\n * Default export for convenience\n */\nexport default platform;"],"names":["PLATFORMS","detectPlatform","isBrowser","isNative","isTauri","isNode","isSSR","getBrowserInfo","userAgent","name","version","match","getPlatformCapabilities","test","canvas","getOperatingSystem","isMobile","isTablet","isDesktop","getDeviceType","supportsFeature","feature","checker","platform"],"mappings":"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"}