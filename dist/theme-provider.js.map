{"version":3,"file":"theme-provider.js","sources":["../src/themes/theme-provider.tsx"],"sourcesContent":["/**\n * Ultra-simple theme provider with pre-bundled themes\n * @module @voilajsx/uikit\n * @file src/themes/theme-provider.tsx\n */\n\nimport React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n\n/**\n * @llm-rule Pre-bundled themes - CSS included in package\n * Simple selection from 6 built-in themes\n */\nexport type Theme = 'default' | 'aurora' | 'metro' | 'neon' | 'ruby' | 'studio';\n\n/**\n * @llm-rule System color scheme preference\n * light: Light system theme\n * dark: Dark system theme\n */\nexport type Mode = 'light' | 'dark';\n\n/**\n * @llm-rule Component visual emphasis system\n * clean â†’ Pure, minimal, white/light backgrounds\n * subtle â†’ Muted, supporting, gray areas\n * brand â†’ Primary colored, branded elements\n * contrast â†’ High emphasis, dark/bold areas\n */\nexport type Tone = 'clean' | 'subtle' | 'brand' | 'contrast';\n\n/**\n * @llm-props ThemeProvider context - Zero complexity\n * REQUIRED: children\n * RECOMMENDED: theme, mode\n * OPTIONAL: detectSystem\n */\nexport interface ThemeContextValue {\n  /** Current theme from pre-bundled options */\n  theme: Theme;\n  /** System color mode */\n  mode: Mode;\n  /** Available themes */\n  availableThemes: Theme[];\n  \n  /** Set theme from pre-bundled options */\n  setTheme: (theme: Theme) => void;\n  /** Set system color mode */\n  setMode: (mode: Mode) => void;\n  /** Toggle between light and dark modes */\n  toggleMode: () => void;\n  \n  /** Get CSS classes for tone */\n  getToneClasses: (tone: Tone) => string;\n  /** Get default tone for component */\n  getDefaultTone: (component: string) => Tone;\n}\n\n/**\n * @llm-props ThemeProvider props\n * REQUIRED: children\n * RECOMMENDED: theme=\"default\", mode=\"light\"\n * OPTIONAL: detectSystem\n * @llm-defaults theme=\"default\", mode=\"light\", detectSystem=true\n */\nexport interface ThemeProviderProps {\n  /** REQUIRED: Child components */\n  children: ReactNode;\n  /** RECOMMENDED: Theme from pre-bundled options (default: \"default\") */\n  theme?: Theme;\n  /** RECOMMENDED: System color mode (default: \"light\") */\n  mode?: Mode;\n  /** OPTIONAL: Auto-detect system preference (default: true) */\n  detectSystem?: boolean;\n}\n\n/**\n * @llm-defaults Tone defaults by component type\n * Smart contextual defaults for LLM predictability\n */\nconst TONE_DEFAULTS: Record<string, Tone> = {\n  AdminLayout: 'subtle',       // Professional admin interfaces\n  PageLayout: 'clean',         // Clean public websites\n  AuthLayout: 'clean',         // Focused authentication\n  PopupLayout: 'clean',        // Clean extensions\n  BlankLayout: 'clean',        // Simple pages\n  Header: 'clean',             // Clean headers\n  Footer: 'contrast',          // Bold footers\n  AdminSidebar: 'subtle',      // Subtle sidebars\n  AdminHeader: 'clean',        // Clean admin headers\n  PopupHeader: 'brand',        // Branded popup headers\n};\n\n/**\n * @llm-rule Tone CSS class mapping\n * CSS variables automatically handle light/dark mode switching\n */\nconst TONE_CLASSES: Record<Tone, string> = {\n  clean: 'bg-background text-foreground border-border',\n  subtle: 'bg-muted/30 text-foreground border-border/50',\n  brand: 'bg-primary text-primary-foreground border-primary/20',\n  contrast: 'bg-foreground text-background border-foreground/20'  // Automatically flips with mode\n};\n\n/**\n * @llm-rule Available pre-bundled themes\n * All themes ship as CSS with the package\n */\nexport const AVAILABLE_THEMES:Theme[] = [\n  'default',   // Professional blue - business apps\n  'aurora',    // Purple/green - creative apps  \n  'metro',     // Transit blue - admin dashboards\n  'neon',      // Electric colors - gaming/tech\n  'ruby',      // Red/gold - luxury brands\n  'studio'     // Designer grays - creative tools\n];\n\n// Theme context\nconst ThemeContext = createContext<ThemeContextValue | undefined>(undefined);\n\n/**\n * Ultra-simple theme provider with pre-bundled themes\n * @llm-pattern Basic usage (recommended)\n * <ThemeProvider theme=\"aurora\" mode=\"dark\">\n *   <App />\n * </ThemeProvider>\n * \n * @llm-pattern Auto-detect system preference\n * <ThemeProvider theme=\"default\" detectSystem>\n *   <App />\n * </ThemeProvider>\n */\nexport function ThemeProvider({\n  children,\n  theme = 'default',\n  mode = 'light',\n  detectSystem = true\n}: ThemeProviderProps): React.JSX.Element {\n  const [themeState, setThemeState] = useState<{\n    theme: Theme;\n    mode: Mode;\n  }>({\n    theme,\n    mode\n  });\n\n  // Initialize from localStorage or system preference\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    \n    try {\n      // Try to load saved preferences\n      const saved = localStorage.getItem('uikit-theme');\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        \n        // Validate saved theme is still available\n        if (AVAILABLE_THEMES.includes(parsed.theme) && \n            ['light', 'dark'].includes(parsed.mode)) {\n          setThemeState(parsed);\n          return;\n        }\n      }\n      \n      // No saved preference - check system preference\n      if (detectSystem) {\n        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n        setThemeState(prev => ({\n          ...prev,\n          mode: prefersDark ? 'dark' : 'light'\n        }));\n      }\n    } catch (e) {\n      console.warn('Failed to load theme preferences:', e);\n    }\n  }, [detectSystem]);\n  \n  // Apply theme classes when state changes\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    \n    const { theme, mode } = themeState;\n    const root = document.documentElement;\n    \n    // Remove existing theme and mode classes\n    root.classList.remove('light', 'dark');\n    AVAILABLE_THEMES.forEach(t => {\n      root.classList.remove(`theme-${t}`);\n    });\n    \n    // Add new classes\n    root.classList.add(mode);\n    if (theme !== 'default') {\n      root.classList.add(`theme-${theme}`);\n    }\n    \n    // Save preferences\n    try {\n      localStorage.setItem('uikit-theme', JSON.stringify({ theme, mode }));\n    } catch (e) {\n      console.warn('Failed to save theme preferences:', e);\n    }\n    \n    console.log(`ðŸŽ¨ Applied theme: ${theme} (${mode} mode)`);\n  }, [themeState]);\n  \n  // Listen for system preference changes\n  useEffect(() => {\n    if (!detectSystem || typeof window === 'undefined') return;\n    \n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    \n    const handleChange = (e: MediaQueryListEvent) => {\n      // Only auto-switch if no manual preference was saved\n      try {\n        const saved = localStorage.getItem('uikit-theme');\n        if (!saved) {\n          setThemeState(prev => ({\n            ...prev,\n            mode: e.matches ? 'dark' : 'light'\n          }));\n        }\n      } catch (e) {\n        console.warn('Failed to handle system preference change:', e);\n      }\n    };\n    \n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, [detectSystem]);\n\n  /**\n   * @llm-rule Set theme from pre-bundled options\n   * Only accepts valid theme names\n   */\n  const setTheme = (newTheme: Theme) => {\n    if (!AVAILABLE_THEMES.includes(newTheme)) {\n      console.warn(`Invalid theme: ${newTheme}. Available themes:`, AVAILABLE_THEMES);\n      return;\n    }\n    \n    setThemeState(prev => ({ ...prev, theme: newTheme }));\n  };\n\n  /**\n   * @llm-rule Set system color mode\n   * Only accepts 'light' or 'dark'\n   */\n  const setMode = (newMode: Mode) => {\n    if (newMode !== 'light' && newMode !== 'dark') {\n      console.warn(`Invalid mode: ${newMode}. Expected 'light' or 'dark'.`);\n      return;\n    }\n    \n    setThemeState(prev => ({ ...prev, mode: newMode }));\n  };\n\n  /**\n   * @llm-rule Toggle between light and dark modes\n   */\n  const toggleMode = () => {\n    setThemeState(prev => ({\n      ...prev,\n      mode: prev.mode === 'light' ? 'dark' : 'light'\n    }));\n  };\n\n  /**\n   * @llm-rule Get CSS classes for tone styling\n   * CSS variables automatically handle light/dark mode\n   */\n  const getToneClasses = (tone: Tone): string => {\n    return TONE_CLASSES[tone];\n  };\n\n  /**\n   * @llm-rule Get default tone for component type\n   * Returns smart contextual defaults for LLM predictability\n   */\n  const getDefaultTone = (component: string): Tone => {\n    return TONE_DEFAULTS[component] || 'clean';\n  };\n  \n  // Create context value\n  const contextValue: ThemeContextValue = {\n    theme: themeState.theme,\n    mode: themeState.mode,\n    availableThemes: AVAILABLE_THEMES,\n    setTheme,\n    setMode,\n    toggleMode,\n    getToneClasses,\n    getDefaultTone\n  };\n  \n  return (\n    <ThemeContext.Provider value={contextValue}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\n/**\n * Hook to access theme context\n * @llm-pattern Basic theme usage\n * const { theme, mode, setTheme, setMode, toggleMode } = useTheme();\n * \n * @llm-pattern Component styling\n * const { getToneClasses, getDefaultTone } = useTheme();\n * const tone = getDefaultTone('AdminLayout');\n * const classes = getToneClasses(tone); // Works automatically in both modes\n */\nexport function useTheme(): ThemeContextValue {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n\n/**\n * @llm-pattern Theme switcher component example\n * const ThemeSwitcher = () => {\n *   const { theme, availableThemes, setTheme } = useTheme();\n *   return (\n *     <select value={theme} onChange={e => setTheme(e.target.value as Theme)}>\n *       {availableThemes.map(t => <option key={t} value={t}>{t}</option>)}\n *     </select>\n *   );\n * };\n */"],"names":["TONE_DEFAULTS","TONE_CLASSES","AVAILABLE_THEMES","ThemeContext","createContext","ThemeProvider","children","theme","mode","detectSystem","themeState","setThemeState","useState","useEffect","saved","parsed","prefersDark","prev","root","t","e","mediaQuery","handleChange","setTheme","newTheme","setMode","newMode","toggleMode","getToneClasses","tone","getDefaultTone","component","contextValue","useTheme","context","useContext"],"mappings":"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"}