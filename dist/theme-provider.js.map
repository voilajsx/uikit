{"version":3,"file":"theme-provider.js","sources":["../src/themes/theme-provider.tsx"],"sourcesContent":["/**\n * Ultra-simple theme provider with pre-bundled themes - CONFIG PRIORITY VERSION\n * @module @voilajsx/uikit\n * @file src/themes/theme-provider.tsx\n */\n\nimport React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n\n/**\n * @llm-rule Pre-bundled themes - CSS included in package\n * Simple selection from 8 built-in themes\n */\nexport type Theme = string;\n\n/**\n * @llm-rule System color scheme preference\n * light: Light system theme\n * dark: Dark system theme\n */\nexport type Mode = 'light' | 'dark';\n\n/**\n * @llm-rule Component visual emphasis system\n * clean â†’ Pure, minimal, white/light backgrounds\n * subtle â†’ Muted, supporting, gray areas\n * brand â†’ Primary colored, branded elements\n * contrast â†’ High emphasis, dark/bold areas\n */\nexport type Tone = 'clean' | 'subtle' | 'brand' | 'contrast';\n\n/**\n * @llm-props ThemeProvider context - Zero complexity\n * REQUIRED: children\n * RECOMMENDED: theme, mode\n * OPTIONAL: detectSystem\n */\nexport interface ThemeContextValue {\n  /** Current theme from pre-bundled options */\n  theme: Theme;\n  /** System color mode */\n  mode: Mode;\n  /** Available themes */\n  availableThemes: Theme[];\n  \n  /** Set theme from pre-bundled options */\n  setTheme: (theme: Theme) => void;\n  /** Set system color mode */\n  setMode: (mode: Mode) => void;\n  /** Toggle between light and dark modes */\n  toggleMode: () => void;\n  \n  /** Get CSS classes for tone */\n  getToneClasses: (tone: Tone) => string;\n  /** Get default tone for component */\n  getDefaultTone: (component: string) => Tone;\n}\n\n/**\n * @llm-props ThemeProvider props - ENHANCED WITH CONFIG PRIORITY\n * REQUIRED: children\n * RECOMMENDED: theme=\"base\", mode=\"light\"\n * OPTIONAL: detectSystem, forceConfig, storageKey\n * @llm-defaults theme=\"base\", mode=\"light\", detectSystem=true, forceConfig=false\n */\nexport interface ThemeProviderProps {\n  /** REQUIRED: Child components */\n  children: ReactNode;\n  /** RECOMMENDED: Theme from pre-bundled options (default: \"default\") */\n  theme?: Theme;\n  /** RECOMMENDED: System color mode (default: \"light\") */\n  mode?: Mode;\n  /** OPTIONAL: Auto-detect system preference (default: true) */\n  detectSystem?: boolean;\n  /** NEW: Force configuration over storage (default: false) */\n  forceConfig?: boolean;\n  /** NEW: Storage key to use (default: \"uikit-theme\", set to null to disable storage) */\n  storageKey?: string | null;\n}\n\n/**\n * @llm-defaults Tone defaults by component type\n * Smart contextual defaults for LLM predictability\n */\nconst TONE_DEFAULTS: Record<string, Tone> = {\n  AdminLayout: 'subtle',       // Professional admin interfaces\n  PageLayout: 'clean',         // Clean public websites\n  AuthLayout: 'clean',         // Focused authentication\n  PopupLayout: 'clean',        // Clean extensions\n  BlankLayout: 'clean',        // Simple pages\n  Header: 'clean',             // Clean headers\n  Footer: 'contrast',          // Bold footers\n  AdminSidebar: 'subtle',      // Subtle sidebars\n  AdminHeader: 'clean',        // Clean admin headers\n  PopupHeader: 'brand',        // Branded popup headers\n};\n\n/**\n * @llm-rule Tone CSS class mapping\n * CSS variables automatically handle light/dark mode switching\n */\nconst TONE_CLASSES: Record<Tone, string> = {\n  clean: 'bg-background text-foreground border-border',\n  subtle: 'bg-muted/30 text-foreground border-border/50',\n  brand: 'bg-primary text-primary-foreground border-primary/20',\n  contrast: 'bg-foreground text-background border-foreground/20'  // Automatically flips with mode\n};\n\n/**\n * @llm-rule Available pre-bundled themes\n * All themes ship as CSS with the package\n */\nexport const AVAILABLE_THEMES: Theme[] = [\n  'base',      // Clean default - showcases base system (DEFAULT)\n  'elegant',   // Minimal blue - clean & professional\n  'metro',     // Dark teal - admin dashboards\n  'studio',    // Designer grays - creative tools\n  'vivid',     // Premium cursive - luxury/creative portfolios\n  'stylist'    // Fashion & design industry theme with pink and orange accents\n];\n\n// Theme context\nconst ThemeContext = createContext<ThemeContextValue | undefined>(undefined);\n\n/**\n * âœ… ENHANCED: Get initial theme state with configuration priority\n */\nfunction getInitialThemeState(\n  defaultTheme: Theme, \n  defaultMode: Mode, \n  detectSystem: boolean,\n  forceConfig: boolean = false,\n  storageKey: string | null = 'uikit-theme'\n): { theme: Theme; mode: Mode } {\n  // Server-side rendering - use props\n  if (typeof window === 'undefined') {\n    return { theme: defaultTheme, mode: defaultMode };\n  }\n\n  // ðŸ”§ NEW: If forceConfig is true, ignore storage and use props\n  if (forceConfig) {\n    console.log(`ðŸŽ¨ Config priority: ${defaultTheme} (${defaultMode} mode)`);\n    return { theme: defaultTheme, mode: defaultMode };\n  }\n\n  // ðŸ”§ NEW: If storageKey is null, skip storage entirely\n  if (storageKey === null) {\n    if (detectSystem) {\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      const systemMode = prefersDark ? 'dark' : 'light';\n      console.log(`ðŸŽ¨ System preference (no storage): ${defaultTheme} (${systemMode} mode)`);\n      return { theme: defaultTheme, mode: systemMode };\n    }\n    console.log(`ðŸŽ¨ Props only (no storage): ${defaultTheme} (${defaultMode} mode)`);\n    return { theme: defaultTheme, mode: defaultMode };\n  }\n\n  try {\n    // Try to load saved preferences from storage\n    const saved = localStorage.getItem(storageKey);\n    if (saved) {\n      const parsed = JSON.parse(saved);\n      \n      // Validate saved theme is still available\n      if (AVAILABLE_THEMES.includes(parsed.theme) && \n          ['light', 'dark'].includes(parsed.mode)) {\n        console.log(`ðŸŽ¨ Restored from storage: ${parsed.theme} (${parsed.mode} mode)`);\n        return parsed;\n      }\n    }\n    \n    // No saved preference - check system preference if enabled\n    if (detectSystem) {\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      const systemMode = prefersDark ? 'dark' : 'light';\n      console.log(`ðŸŽ¨ System preference: ${defaultTheme} (${systemMode} mode)`);\n      return { theme: defaultTheme, mode: systemMode };\n    }\n    \n    // Use props as fallback\n    console.log(`ðŸŽ¨ Props fallback: ${defaultTheme} (${defaultMode} mode)`);\n    return { theme: defaultTheme, mode: defaultMode };\n    \n  } catch (e) {\n    console.warn('Failed to load theme preferences, using defaults:', e);\n    return { theme: defaultTheme, mode: defaultMode };\n  }\n}\n\n/**\n * âœ… FIX: Apply theme immediately on document (before React renders)\n */\nfunction applyThemeImmediately(theme: Theme, mode: Mode) {\n  if (typeof window === 'undefined') return;\n  \n  const root = document.documentElement;\n  \n  // Remove existing theme and mode classes\n  root.classList.remove('light', 'dark');\n  AVAILABLE_THEMES.forEach(t => {\n    root.classList.remove(`theme-${t}`);\n  });\n  \n  // Add new classes immediately\n  root.classList.add(mode);\n  root.classList.add(`theme-${theme}`);\n}\n\n/**\n * ðŸ”§ ENHANCED: Ultra-simple theme provider with configuration priority\n * @llm-pattern Basic usage (default behavior - storage first)\n * <ThemeProvider theme=\"elegant\" mode=\"dark\">\n *   <App />\n * </ThemeProvider>\n * \n * @llm-pattern Force configuration (ignore storage completely)\n * <ThemeProvider theme=\"elegant\" mode=\"dark\" forceConfig={true}>\n *   <App />\n * </ThemeProvider>\n * \n * @llm-pattern Disable storage entirely\n * <ThemeProvider theme=\"elegant\" mode=\"dark\" storageKey={null}>\n *   <App />\n * </ThemeProvider>\n * \n * @llm-pattern Custom storage key\n * <ThemeProvider theme=\"elegant\" mode=\"dark\" storageKey=\"my-app-theme\">\n *   <App />\n * </ThemeProvider>\n */\nexport function ThemeProvider({\n  children,\n  theme = 'base',\n  mode = 'light',\n  detectSystem = true,\n  forceConfig = false,        // ðŸ”§ NEW: Force config over storage\n  storageKey = 'uikit-theme'  // ðŸ”§ NEW: Configurable storage key\n}: ThemeProviderProps): React.JSX.Element {\n  \n  // âœ… ENHANCED: Initialize with configuration priority logic\n  const [themeState, setThemeState] = useState(() => {\n    const initialState = getInitialThemeState(theme, mode, detectSystem, forceConfig, storageKey);\n    \n    // âœ… CRITICAL: Apply theme immediately before React renders\n    applyThemeImmediately(initialState.theme, initialState.mode);\n    \n    return initialState;\n  });\n\n  // âœ… ENHANCED: Apply theme classes when state changes\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    \n    const { theme: currentTheme, mode: currentMode } = themeState;\n    \n    // Apply theme classes\n    applyThemeImmediately(currentTheme, currentMode);\n    \n    // ðŸ”§ NEW: Save preferences only if storage is enabled and not forcing config\n    if (storageKey && !forceConfig) {\n      try {\n        localStorage.setItem(storageKey, JSON.stringify({ theme: currentTheme, mode: currentMode }));\n      } catch (e) {\n        console.warn('Failed to save theme preferences:', e);\n      }\n    }\n    \n    console.log(`ðŸŽ¨ Applied theme: ${currentTheme} (${currentMode} mode)`);\n  }, [themeState, storageKey, forceConfig]);\n  \n  // âœ… ENHANCED: Listen for system preference changes (respects forceConfig)\n  useEffect(() => {\n    if (!detectSystem || typeof window === 'undefined') return;\n    \n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    \n    const handleChange = (e: MediaQueryListEvent) => {\n      // ðŸ”§ NEW: Don't auto-switch if forcing config or manual preference was saved\n      if (forceConfig) return;\n      \n      try {\n        const saved = storageKey ? localStorage.getItem(storageKey) : null;\n        if (!saved) {\n          setThemeState(prev => ({\n            ...prev,\n            mode: e.matches ? 'dark' : 'light'\n          }));\n        }\n      } catch (e) {\n        console.warn('Failed to handle system preference change:', e);\n      }\n    };\n    \n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, [detectSystem, forceConfig, storageKey]);\n\n  /**\n   * @llm-rule Set theme from pre-bundled options\n   * Only accepts valid theme names\n   */\n  const setTheme = (newTheme: Theme) => {\n    if (!AVAILABLE_THEMES.includes(newTheme)) {\n      console.warn(`Invalid theme: ${newTheme}. Available themes:`, AVAILABLE_THEMES);\n      return;\n    }\n    \n    setThemeState(prev => ({ ...prev, theme: newTheme }));\n  };\n\n  /**\n   * @llm-rule Set system color mode\n   * Only accepts 'light' or 'dark'\n   */\n  const setMode = (newMode: Mode) => {\n    if (newMode !== 'light' && newMode !== 'dark') {\n      console.warn(`Invalid mode: ${newMode}. Expected 'light' or 'dark'.`);\n      return;\n    }\n    \n    setThemeState(prev => ({ ...prev, mode: newMode }));\n  };\n\n  /**\n   * @llm-rule Toggle between light and dark modes\n   */\n  const toggleMode = () => {\n    setThemeState(prev => ({\n      ...prev,\n      mode: prev.mode === 'light' ? 'dark' : 'light'\n    }));\n  };\n\n  /**\n   * @llm-rule Get CSS classes for tone styling\n   * CSS variables automatically handle light/dark mode\n   */\n  const getToneClasses = (tone: Tone): string => {\n    return TONE_CLASSES[tone];\n  };\n\n  /**\n   * @llm-rule Get default tone for component type\n   * Returns smart contextual defaults for LLM predictability\n   */\n  const getDefaultTone = (component: string): Tone => {\n    return TONE_DEFAULTS[component] || 'clean';\n  };\n  \n  // Create context value\n  const contextValue: ThemeContextValue = {\n    theme: themeState.theme,\n    mode: themeState.mode,\n    availableThemes: AVAILABLE_THEMES,\n    setTheme,\n    setMode,\n    toggleMode,\n    getToneClasses,\n    getDefaultTone\n  };\n  \n  return (\n    <ThemeContext.Provider value={contextValue}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\n/**\n * Hook to access theme context\n * @llm-pattern Basic theme usage\n * const { theme, mode, setTheme, setMode, toggleMode } = useTheme();\n * \n * @llm-pattern Component styling\n * const { getToneClasses, getDefaultTone } = useTheme();\n * const tone = getDefaultTone('AdminLayout');\n * const classes = getToneClasses(tone); // Works automatically in both modes\n */\nexport function useTheme(): ThemeContextValue {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n\n/**\n * @llm-pattern Theme switcher component example\n * const ThemeSwitcher = () => {\n *   const { theme, availableThemes, setTheme } = useTheme();\n *   return (\n *     <select value={theme} onChange={e => setTheme(e.target.value as Theme)}>\n *       {availableThemes.map(t => <option key={t} value={t}>{t}</option>)}\n *     </select>\n *   );\n * };\n */"],"names":["TONE_DEFAULTS","TONE_CLASSES","AVAILABLE_THEMES","ThemeContext","createContext","getInitialThemeState","defaultTheme","defaultMode","detectSystem","forceConfig","storageKey","systemMode","saved","parsed","e","applyThemeImmediately","theme","mode","root","t","ThemeProvider","children","themeState","setThemeState","useState","initialState","useEffect","currentTheme","currentMode","mediaQuery","handleChange","prev","setTheme","newTheme","setMode","newMode","toggleMode","getToneClasses","tone","getDefaultTone","component","contextValue","useTheme","context","useContext"],"mappings":"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"}