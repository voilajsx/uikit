{"version":3,"file":"theme-provider.js","sources":["../src/themes/theme-provider.tsx"],"sourcesContent":["/**\n * Ultra-simple theme provider with pre-bundled themes - NO FLASH VERSION\n * @module @voilajsx/uikit\n * @file src/themes/theme-provider.tsx\n */\n\nimport React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n\n/**\n * @llm-rule Pre-bundled themes - CSS included in package\n * Simple selection from 6 built-in themes\n */\nexport type Theme = 'default' | 'aurora' | 'metro' | 'neon' | 'ruby' | 'studio';\n\n/**\n * @llm-rule System color scheme preference\n * light: Light system theme\n * dark: Dark system theme\n */\nexport type Mode = 'light' | 'dark';\n\n/**\n * @llm-rule Component visual emphasis system\n * clean â†’ Pure, minimal, white/light backgrounds\n * subtle â†’ Muted, supporting, gray areas\n * brand â†’ Primary colored, branded elements\n * contrast â†’ High emphasis, dark/bold areas\n */\nexport type Tone = 'clean' | 'subtle' | 'brand' | 'contrast';\n\n/**\n * @llm-props ThemeProvider context - Zero complexity\n * REQUIRED: children\n * RECOMMENDED: theme, mode\n * OPTIONAL: detectSystem\n */\nexport interface ThemeContextValue {\n  /** Current theme from pre-bundled options */\n  theme: Theme;\n  /** System color mode */\n  mode: Mode;\n  /** Available themes */\n  availableThemes: Theme[];\n  \n  /** Set theme from pre-bundled options */\n  setTheme: (theme: Theme) => void;\n  /** Set system color mode */\n  setMode: (mode: Mode) => void;\n  /** Toggle between light and dark modes */\n  toggleMode: () => void;\n  \n  /** Get CSS classes for tone */\n  getToneClasses: (tone: Tone) => string;\n  /** Get default tone for component */\n  getDefaultTone: (component: string) => Tone;\n}\n\n/**\n * @llm-props ThemeProvider props\n * REQUIRED: children\n * RECOMMENDED: theme=\"default\", mode=\"light\"\n * OPTIONAL: detectSystem\n * @llm-defaults theme=\"default\", mode=\"light\", detectSystem=true\n */\nexport interface ThemeProviderProps {\n  /** REQUIRED: Child components */\n  children: ReactNode;\n  /** RECOMMENDED: Theme from pre-bundled options (default: \"default\") */\n  theme?: Theme;\n  /** RECOMMENDED: System color mode (default: \"light\") */\n  mode?: Mode;\n  /** OPTIONAL: Auto-detect system preference (default: true) */\n  detectSystem?: boolean;\n}\n\n/**\n * @llm-defaults Tone defaults by component type\n * Smart contextual defaults for LLM predictability\n */\nconst TONE_DEFAULTS: Record<string, Tone> = {\n  AdminLayout: 'subtle',       // Professional admin interfaces\n  PageLayout: 'clean',         // Clean public websites\n  AuthLayout: 'clean',         // Focused authentication\n  PopupLayout: 'clean',        // Clean extensions\n  BlankLayout: 'clean',        // Simple pages\n  Header: 'clean',             // Clean headers\n  Footer: 'contrast',          // Bold footers\n  AdminSidebar: 'subtle',      // Subtle sidebars\n  AdminHeader: 'clean',        // Clean admin headers\n  PopupHeader: 'brand',        // Branded popup headers\n};\n\n/**\n * @llm-rule Tone CSS class mapping\n * CSS variables automatically handle light/dark mode switching\n */\nconst TONE_CLASSES: Record<Tone, string> = {\n  clean: 'bg-background text-foreground border-border',\n  subtle: 'bg-muted/30 text-foreground border-border/50',\n  brand: 'bg-primary text-primary-foreground border-primary/20',\n  contrast: 'bg-foreground text-background border-foreground/20'  // Automatically flips with mode\n};\n\n/**\n * @llm-rule Available pre-bundled themes\n * All themes ship as CSS with the package\n */\nexport const AVAILABLE_THEMES: Theme[] = [\n  'default',   // Professional blue - business apps\n  'aurora',    // Purple/green - creative apps  \n  'metro',     // Transit blue - admin dashboards\n  'neon',      // Electric colors - gaming/tech\n  'ruby',      // Red/gold - luxury brands\n  'studio'     // Designer grays - creative tools\n];\n\n// Theme context\nconst ThemeContext = createContext<ThemeContextValue | undefined>(undefined);\n\n/**\n * âœ… FIX: Get initial theme state synchronously (no flash)\n */\nfunction getInitialThemeState(\n  defaultTheme: Theme, \n  defaultMode: Mode, \n  detectSystem: boolean\n): { theme: Theme; mode: Mode } {\n  // Server-side rendering - use props\n  if (typeof window === 'undefined') {\n    return { theme: defaultTheme, mode: defaultMode };\n  }\n\n  try {\n    // Try to load saved preferences first\n    const saved = localStorage.getItem('uikit-theme');\n    if (saved) {\n      const parsed = JSON.parse(saved);\n      \n      // Validate saved theme is still available\n      if (AVAILABLE_THEMES.includes(parsed.theme) && \n          ['light', 'dark'].includes(parsed.mode)) {\n        console.log(`ðŸŽ¨ Restored theme: ${parsed.theme} (${parsed.mode} mode)`);\n        return parsed;\n      }\n    }\n    \n    // No saved preference - check system preference if enabled\n    if (detectSystem) {\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      const systemMode = prefersDark ? 'dark' : 'light';\n      console.log(`ðŸŽ¨ Using system preference: ${defaultTheme} (${systemMode} mode)`);\n      return { theme: defaultTheme, mode: systemMode };\n    }\n    \n    // Use props as fallback\n    console.log(`ðŸŽ¨ Using default: ${defaultTheme} (${defaultMode} mode)`);\n    return { theme: defaultTheme, mode: defaultMode };\n    \n  } catch (e) {\n    console.warn('Failed to load theme preferences, using defaults:', e);\n    return { theme: defaultTheme, mode: defaultMode };\n  }\n}\n\n/**\n * âœ… FIX: Apply theme immediately on document (before React renders)\n */\nfunction applyThemeImmediately(theme: Theme, mode: Mode) {\n  if (typeof window === 'undefined') return;\n  \n  const root = document.documentElement;\n  \n  // Remove existing theme and mode classes\n  root.classList.remove('light', 'dark');\n  AVAILABLE_THEMES.forEach(t => {\n    root.classList.remove(`theme-${t}`);\n  });\n  \n  // Add new classes immediately\n  root.classList.add(mode);\n  if (theme !== 'default') {\n    root.classList.add(`theme-${theme}`);\n  }\n}\n\n/**\n * Ultra-simple theme provider with pre-bundled themes - NO FLASH VERSION\n * @llm-pattern Basic usage (recommended)\n * <ThemeProvider theme=\"aurora\" mode=\"dark\">\n *   <App />\n * </ThemeProvider>\n * \n * @llm-pattern Auto-detect system preference\n * <ThemeProvider theme=\"default\" detectSystem>\n *   <App />\n * </ThemeProvider>\n */\nexport function ThemeProvider({\n  children,\n  theme = 'default',\n  mode = 'light',\n  detectSystem = true\n}: ThemeProviderProps): React.JSX.Element {\n  \n  // âœ… FIX: Initialize with correct theme from the start (no flash)\n  const [themeState, setThemeState] = useState(() => {\n    const initialState = getInitialThemeState(theme, mode, detectSystem);\n    \n    // âœ… CRITICAL: Apply theme immediately before React renders\n    applyThemeImmediately(initialState.theme, initialState.mode);\n    \n    return initialState;\n  });\n\n  // âœ… FIX: Apply theme classes when state changes (but not on initial mount)\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    \n    const { theme: currentTheme, mode: currentMode } = themeState;\n    \n    // Apply theme classes\n    applyThemeImmediately(currentTheme, currentMode);\n    \n    // Save preferences\n    try {\n      localStorage.setItem('uikit-theme', JSON.stringify({ theme: currentTheme, mode: currentMode }));\n    } catch (e) {\n      console.warn('Failed to save theme preferences:', e);\n    }\n    \n    console.log(`ðŸŽ¨ Applied theme: ${currentTheme} (${currentMode} mode)`);\n  }, [themeState]);\n  \n  // âœ… FIX: Listen for system preference changes (but don't override saved preferences)\n  useEffect(() => {\n    if (!detectSystem || typeof window === 'undefined') return;\n    \n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    \n    const handleChange = (e: MediaQueryListEvent) => {\n      // Only auto-switch if no manual preference was saved\n      try {\n        const saved = localStorage.getItem('uikit-theme');\n        if (!saved) {\n          setThemeState(prev => ({\n            ...prev,\n            mode: e.matches ? 'dark' : 'light'\n          }));\n        }\n      } catch (e) {\n        console.warn('Failed to handle system preference change:', e);\n      }\n    };\n    \n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, [detectSystem]);\n\n  /**\n   * @llm-rule Set theme from pre-bundled options\n   * Only accepts valid theme names\n   */\n  const setTheme = (newTheme: Theme) => {\n    if (!AVAILABLE_THEMES.includes(newTheme)) {\n      console.warn(`Invalid theme: ${newTheme}. Available themes:`, AVAILABLE_THEMES);\n      return;\n    }\n    \n    setThemeState(prev => ({ ...prev, theme: newTheme }));\n  };\n\n  /**\n   * @llm-rule Set system color mode\n   * Only accepts 'light' or 'dark'\n   */\n  const setMode = (newMode: Mode) => {\n    if (newMode !== 'light' && newMode !== 'dark') {\n      console.warn(`Invalid mode: ${newMode}. Expected 'light' or 'dark'.`);\n      return;\n    }\n    \n    setThemeState(prev => ({ ...prev, mode: newMode }));\n  };\n\n  /**\n   * @llm-rule Toggle between light and dark modes\n   */\n  const toggleMode = () => {\n    setThemeState(prev => ({\n      ...prev,\n      mode: prev.mode === 'light' ? 'dark' : 'light'\n    }));\n  };\n\n  /**\n   * @llm-rule Get CSS classes for tone styling\n   * CSS variables automatically handle light/dark mode\n   */\n  const getToneClasses = (tone: Tone): string => {\n    return TONE_CLASSES[tone];\n  };\n\n  /**\n   * @llm-rule Get default tone for component type\n   * Returns smart contextual defaults for LLM predictability\n   */\n  const getDefaultTone = (component: string): Tone => {\n    return TONE_DEFAULTS[component] || 'clean';\n  };\n  \n  // Create context value\n  const contextValue: ThemeContextValue = {\n    theme: themeState.theme,\n    mode: themeState.mode,\n    availableThemes: AVAILABLE_THEMES,\n    setTheme,\n    setMode,\n    toggleMode,\n    getToneClasses,\n    getDefaultTone\n  };\n  \n  return (\n    <ThemeContext.Provider value={contextValue}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\n/**\n * Hook to access theme context\n * @llm-pattern Basic theme usage\n * const { theme, mode, setTheme, setMode, toggleMode } = useTheme();\n * \n * @llm-pattern Component styling\n * const { getToneClasses, getDefaultTone } = useTheme();\n * const tone = getDefaultTone('AdminLayout');\n * const classes = getToneClasses(tone); // Works automatically in both modes\n */\nexport function useTheme(): ThemeContextValue {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n\n/**\n * @llm-pattern Theme switcher component example\n * const ThemeSwitcher = () => {\n *   const { theme, availableThemes, setTheme } = useTheme();\n *   return (\n *     <select value={theme} onChange={e => setTheme(e.target.value as Theme)}>\n *       {availableThemes.map(t => <option key={t} value={t}>{t}</option>)}\n *     </select>\n *   );\n * };\n */"],"names":["TONE_DEFAULTS","TONE_CLASSES","AVAILABLE_THEMES","ThemeContext","createContext","getInitialThemeState","defaultTheme","defaultMode","detectSystem","saved","parsed","systemMode","e","applyThemeImmediately","theme","mode","root","t","ThemeProvider","children","themeState","setThemeState","useState","initialState","useEffect","currentTheme","currentMode","mediaQuery","handleChange","prev","setTheme","newTheme","setMode","newMode","toggleMode","getToneClasses","tone","getDefaultTone","component","contextValue","useTheme","context","useContext"],"mappings":";;AA+EA,MAAMA,IAAsC;AAAA,EAC1C,aAAa;AAAA;AAAA,EACb,YAAY;AAAA;AAAA,EACZ,YAAY;AAAA;AAAA,EACZ,aAAa;AAAA;AAAA,EACb,aAAa;AAAA;AAAA,EACb,QAAQ;AAAA;AAAA,EACR,QAAQ;AAAA;AAAA,EACR,cAAc;AAAA;AAAA,EACd,aAAa;AAAA;AAAA,EACb,aAAa;AAAA;AACf,GAMMC,IAAqC;AAAA,EACzC,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,UAAU;AAAA;AACZ,GAMaC,IAA4B;AAAA,EACvC;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AACF,GAGMC,IAAeC,EAA6C,MAAS;AAK3E,SAASC,EACPC,GACAC,GACAC,GAC8B;AAE9B,MAAI,OAAO,SAAW;AACpB,WAAO,EAAE,OAAOF,GAAc,MAAMC,EAAA;AAGtC,MAAI;AAEF,UAAME,IAAQ,aAAa,QAAQ,aAAa;AAChD,QAAIA,GAAO;AACT,YAAMC,IAAS,KAAK,MAAMD,CAAK;AAG/B,UAAIP,EAAiB,SAASQ,EAAO,KAAK,KACtC,CAAC,SAAS,MAAM,EAAE,SAASA,EAAO,IAAI;AACxC,uBAAQ,IAAI,sBAAsBA,EAAO,KAAK,KAAKA,EAAO,IAAI,QAAQ,GAC/DA;AAAA,IACT;AAIF,QAAIF,GAAc;AAEhB,YAAMG,IADc,OAAO,WAAW,8BAA8B,EAAE,UACrC,SAAS;AAC1C,qBAAQ,IAAI,+BAA+BL,CAAY,KAAKK,CAAU,QAAQ,GACvE,EAAE,OAAOL,GAAc,MAAMK,EAAA;AAAA,IAAW;AAIjD,mBAAQ,IAAI,qBAAqBL,CAAY,KAAKC,CAAW,QAAQ,GAC9D,EAAE,OAAOD,GAAc,MAAMC,EAAA;AAAA,EAAY,SAEzCK,GAAG;AACV,mBAAQ,KAAK,qDAAqDA,CAAC,GAC5D,EAAE,OAAON,GAAc,MAAMC,EAAA;AAAA,EAAY;AAEpD;AAKA,SAASM,EAAsBC,GAAcC,GAAY;AACvD,MAAI,OAAO,SAAW,IAAa;AAEnC,QAAMC,IAAO,SAAS;AAGtB,EAAAA,EAAK,UAAU,OAAO,SAAS,MAAM,GACrCd,EAAiB,QAAQ,CAAAe,MAAK;AAC5B,IAAAD,EAAK,UAAU,OAAO,SAASC,CAAC,EAAE;AAAA,EAAA,CACnC,GAGDD,EAAK,UAAU,IAAID,CAAI,GACnBD,MAAU,aACZE,EAAK,UAAU,IAAI,SAASF,CAAK,EAAE;AAEvC;AAcO,SAASI,EAAc;AAAA,EAC5B,UAAAC;AAAA,EACA,OAAAL,IAAQ;AAAA,EACR,MAAAC,IAAO;AAAA,EACP,cAAAP,IAAe;AACjB,GAA0C;AAGxC,QAAM,CAACY,GAAYC,CAAa,IAAIC,EAAS,MAAM;AACjD,UAAMC,IAAelB,EAAqBS,GAAOC,GAAMP,CAAY;AAGnE,WAAAK,EAAsBU,EAAa,OAAOA,EAAa,IAAI,GAEpDA;AAAA,EAAA,CACR;AAGD,EAAAC,EAAU,MAAM;AACd,QAAI,OAAO,SAAW,IAAa;AAEnC,UAAM,EAAE,OAAOC,GAAc,MAAMC,MAAgBN;AAGnD,IAAAP,EAAsBY,GAAcC,CAAW;AAG/C,QAAI;AACF,mBAAa,QAAQ,eAAe,KAAK,UAAU,EAAE,OAAOD,GAAc,MAAMC,EAAA,CAAa,CAAC;AAAA,IAAA,SACvFd,GAAG;AACV,cAAQ,KAAK,qCAAqCA,CAAC;AAAA,IAAA;AAGrD,YAAQ,IAAI,qBAAqBa,CAAY,KAAKC,CAAW,QAAQ;AAAA,EAAA,GACpE,CAACN,CAAU,CAAC,GAGfI,EAAU,MAAM;AACd,QAAI,CAAChB,KAAgB,OAAO,SAAW,IAAa;AAEpD,UAAMmB,IAAa,OAAO,WAAW,8BAA8B,GAE7DC,IAAe,CAAChB,MAA2B;AAE/C,UAAI;AAEF,QADc,aAAa,QAAQ,aAAa,KAE9CS,EAAc,CAAAQ,OAAS;AAAA,UACrB,GAAGA;AAAA,UACH,MAAMjB,EAAE,UAAU,SAAS;AAAA,QAAA,EAC3B;AAAA,MACJ,SACOA,GAAG;AACV,gBAAQ,KAAK,8CAA8CA,CAAC;AAAA,MAAA;AAAA,IAC9D;AAGF,WAAAe,EAAW,iBAAiB,UAAUC,CAAY,GAC3C,MAAMD,EAAW,oBAAoB,UAAUC,CAAY;AAAA,EAAA,GACjE,CAACpB,CAAY,CAAC;AAMjB,QAAMsB,IAAW,CAACC,MAAoB;AACpC,QAAI,CAAC7B,EAAiB,SAAS6B,CAAQ,GAAG;AACxC,cAAQ,KAAK,kBAAkBA,CAAQ,uBAAuB7B,CAAgB;AAC9E;AAAA,IAAA;AAGF,IAAAmB,EAAc,QAAS,EAAE,GAAGQ,GAAM,OAAOE,IAAW;AAAA,EAAA,GAOhDC,IAAU,CAACC,MAAkB;AACjC,QAAIA,MAAY,WAAWA,MAAY,QAAQ;AAC7C,cAAQ,KAAK,iBAAiBA,CAAO,+BAA+B;AACpE;AAAA,IAAA;AAGF,IAAAZ,EAAc,QAAS,EAAE,GAAGQ,GAAM,MAAMI,IAAU;AAAA,EAAA,GAM9CC,IAAa,MAAM;AACvB,IAAAb,EAAc,CAAAQ,OAAS;AAAA,MACrB,GAAGA;AAAA,MACH,MAAMA,EAAK,SAAS,UAAU,SAAS;AAAA,IAAA,EACvC;AAAA,EAAA,GAOEM,IAAiB,CAACC,MACfnC,EAAamC,CAAI,GAOpBC,IAAiB,CAACC,MACftC,EAAcsC,CAAS,KAAK,SAI/BC,IAAkC;AAAA,IACtC,OAAOnB,EAAW;AAAA,IAClB,MAAMA,EAAW;AAAA,IACjB,iBAAiBlB;AAAA,IACjB,UAAA4B;AAAA,IACA,SAAAE;AAAA,IACA,YAAAE;AAAA,IACA,gBAAAC;AAAA,IACA,gBAAAE;AAAA,EAAA;AAGF,2BACGlC,EAAa,UAAb,EAAsB,OAAOoC,GAC3B,UAAApB,GACH;AAEJ;AAYO,SAASqB,IAA8B;AAC5C,QAAMC,IAAUC,EAAWvC,CAAY;AACvC,MAAI,CAACsC;AACH,UAAM,IAAI,MAAM,8CAA8C;AAEhE,SAAOA;AACT;"}