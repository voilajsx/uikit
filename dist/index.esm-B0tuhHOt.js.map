{"version":3,"file":"index.esm-B0tuhHOt.js","sources":["../node_modules/react-hook-form/dist/index.esm.mjs"],"sourcesContent":["import * as React from 'react';\nimport React__default from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    const isFileListInstance = typeof FileList !== 'undefined' ? data instanceof FileList : false;\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || isFileListInstance)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar isUndefined = (val) => val === undefined;\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = (isKey(path) ? [path] : stringToPath(path)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React__default.createContext(null);\nHookFormContext.displayName = 'HookFormContext';\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React__default.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React__default.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React__default.useState(control._formState);\n    const _localProxyFormState = React__default.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    useIsomorphicLayoutEffect(() => control._subscribe({\n        name,\n        formState: _localProxyFormState.current,\n        exact,\n        callback: (formState) => {\n            !disabled &&\n                updateFormState({\n                    ...control._formState,\n                    ...formState,\n                });\n        },\n    }), [name, disabled, exact]);\n    React__default.useEffect(() => {\n        _localProxyFormState.current.isValid && control._setValid(true);\n    }, [control]);\n    return React__default.useMemo(() => getProxyFormState(formState, control, _localProxyFormState.current, false), [formState, control]);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _defaultValue = React__default.useRef(defaultValue);\n    const [value, updateValue] = React__default.useState(control._getWatch(name, _defaultValue.current));\n    useIsomorphicLayoutEffect(() => control._subscribe({\n        name,\n        formState: {\n            values: true,\n        },\n        exact,\n        callback: (formState) => !disabled &&\n            updateValue(generateWatchOutput(name, control._names, formState.values || control._formValues, false, _defaultValue.current)),\n    }), [name, control, disabled, exact]);\n    React__default.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n        exact: true,\n    });\n    const _props = React__default.useRef(props);\n    const _registerProps = React__default.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    const fieldState = React__default.useMemo(() => Object.defineProperties({}, {\n        invalid: {\n            enumerable: true,\n            get: () => !!get(formState.errors, name),\n        },\n        isDirty: {\n            enumerable: true,\n            get: () => !!get(formState.dirtyFields, name),\n        },\n        isTouched: {\n            enumerable: true,\n            get: () => !!get(formState.touchedFields, name),\n        },\n        isValidating: {\n            enumerable: true,\n            get: () => !!get(formState.validatingFields, name),\n        },\n        error: {\n            enumerable: true,\n            get: () => get(formState.errors, name),\n        },\n    }), [formState, name]);\n    const onChange = React__default.useCallback((event) => _registerProps.current.onChange({\n        target: {\n            value: getEventValue(event),\n            name: name,\n        },\n        type: EVENTS.CHANGE,\n    }), [name]);\n    const onBlur = React__default.useCallback(() => _registerProps.current.onBlur({\n        target: {\n            value: get(control._formValues, name),\n            name: name,\n        },\n        type: EVENTS.BLUR,\n    }), [name, control._formValues]);\n    const ref = React__default.useCallback((elm) => {\n        const field = get(control._fields, name);\n        if (field && elm) {\n            field._f.ref = {\n                focus: () => elm.focus && elm.focus(),\n                select: () => elm.select && elm.select(),\n                setCustomValidity: (message) => elm.setCustomValidity(message),\n                reportValidity: () => elm.reportValidity(),\n            };\n        }\n    }, [control._fields, name]);\n    const field = React__default.useMemo(() => ({\n        name,\n        value,\n        ...(isBoolean(disabled) || formState.disabled\n            ? { disabled: formState.disabled || disabled }\n            : {}),\n        onChange,\n        onBlur,\n        ref,\n    }), [name, disabled, formState.disabled, onChange, onBlur, ref, value]);\n    React__default.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        control.register(name, {\n            ..._props.current.rules,\n            ...(isBoolean(_props.current.disabled)\n                ? { disabled: _props.current.disabled }\n                : {}),\n        });\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field && field._f) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        !isArrayField && control.register(name);\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React__default.useEffect(() => {\n        control._setDisabledField({\n            disabled,\n            name,\n        });\n    }, [disabled, name, control]);\n    return React__default.useMemo(() => ({\n        field,\n        formState,\n        fieldState,\n    }), [field, formState, fieldState]);\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst flatten = (obj) => {\n    const output = {};\n    for (const key of Object.keys(obj)) {\n        if (isObjectType(obj[key]) && obj[key] !== null) {\n            const nested = flatten(obj[key]);\n            for (const nestedKey of Object.keys(nested)) {\n                output[`${key}.${nestedKey}`] = nested[nestedKey];\n            }\n        }\n        else {\n            output[key] = obj[key];\n        }\n    }\n    return output;\n};\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React__default.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            const flattenFormValues = flatten(control._formValues);\n            for (const key in flattenFormValues) {\n                formData.append(key, flattenFormValues[key]);\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(String(action), {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React__default.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React__default.createElement(React__default.Fragment, null, render({\n        submit,\n    }))) : (React__default.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\nvar hasPromiseValidation = (fieldReference) => !!fieldReference &&\n    !!fieldReference.validate &&\n    !!((isFunction(fieldReference.validate) &&\n        fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n        (isObject(fieldReference.validate) &&\n            Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION)));\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    return true;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    return true;\n                }\n                else {\n                    if (iterateFieldsByAction(currentField, action)) {\n                        break;\n                    }\n                }\n            }\n            else if (isObject(currentField)) {\n                if (iterateFieldsByAction(currentField, action)) {\n                    break;\n                }\n            }\n        }\n    }\n    return;\n};\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        if (foundError && foundError.root && foundError.root.type) {\n            return {\n                name: `${fieldName}.root`,\n                error: foundError.root,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isMessage = (value) => isString(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, disabledFieldNames, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabledFieldNames.has(name)) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isReady: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    const _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        disabled: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    let _proxySubscribeFormState = {\n        ..._proxyFormState,\n    };\n    const _subjects = {\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _setValid = async (shouldUpdateValid) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValid ||\n                _proxySubscribeFormState.isValid ||\n                shouldUpdateValid)) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _runSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValidating ||\n                _proxyFormState.validatingFields ||\n                _proxySubscribeFormState.isValidating ||\n                _proxySubscribeFormState.validatingFields)) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _setFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method && !_options.disabled) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if ((_proxyFormState.touchedFields ||\n                _proxySubscribeFormState.touchedFields) &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields || _proxySubscribeFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _setValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!_options.disabled) {\n            if (!isBlurEvent || shouldDirty) {\n                if (_proxyFormState.isDirty || _proxySubscribeFormState.isDirty) {\n                    isPreviousDirty = _formState.isDirty;\n                    _formState.isDirty = output.isDirty = _getDirty();\n                    shouldUpdateField = isPreviousDirty !== output.isDirty;\n                }\n                const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n                isPreviousDirty = !!get(_formState.dirtyFields, name);\n                isCurrentFieldPristine\n                    ? unset(_formState.dirtyFields, name)\n                    : set(_formState.dirtyFields, name, true);\n                output.dirtyFields = _formState.dirtyFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        ((_proxyFormState.dirtyFields ||\n                            _proxySubscribeFormState.dirtyFields) &&\n                            isPreviousDirty !== !isCurrentFieldPristine);\n            }\n            if (isBlurEvent) {\n                const isPreviousFieldTouched = get(_formState.touchedFields, name);\n                if (!isPreviousFieldTouched) {\n                    set(_formState.touchedFields, name, isBlurEvent);\n                    output.touchedFields = _formState.touchedFields;\n                    shouldUpdateField =\n                        shouldUpdateField ||\n                            ((_proxyFormState.touchedFields ||\n                                _proxySubscribeFormState.touchedFields) &&\n                                isPreviousFieldTouched !== isBlurEvent);\n                }\n            }\n            shouldUpdateField && shouldRender && _subjects.state.next(output);\n        }\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = (_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (_options.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(_options.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _runSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _runSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const isPromiseFunction = field._f && hasPromiseValidation(field._f);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name], true);\n                    }\n                    const fieldError = await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name]);\n                    }\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                !isEmptyObject(fieldValue) &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => !_options.disabled &&\n        (name && data && set(_formValues, name, data),\n            !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, _options.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.forEach((checkboxRef) => {\n                            if (!checkboxRef.defaultChecked || !checkboxRef.disabled) {\n                                if (Array.isArray(fieldValue)) {\n                                    checkboxRef.checked = !!fieldValue.find((data) => data === checkboxRef.value);\n                                }\n                                else {\n                                    checkboxRef.checked =\n                                        fieldValue === checkboxRef.value || !!fieldValue;\n                                }\n                            }\n                        });\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.state.next({\n                            name,\n                            values: cloneObject(_formValues),\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            if (!value.hasOwnProperty(fieldKey)) {\n                return;\n            }\n            const fieldValue = value[fieldKey];\n            const fieldName = name + '.' + fieldKey;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                isObject(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: cloneObject(_formValues),\n            });\n            if ((_proxyFormState.isDirty ||\n                _proxyFormState.dirtyFields ||\n                _proxySubscribeFormState.isDirty ||\n                _proxySubscribeFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.state.next({\n            name: _state.mount ? name : undefined,\n            values: cloneObject(_formValues),\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\n                    deepEqual(fieldValue, get(_formValues, name, fieldValue));\n        };\n        const validationModeBeforeSubmit = getValidationModes(_options.mode);\n        const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = target.type\n                ? getFieldValue(field._f)\n                : getEventValue(event);\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.state.next({\n                    name,\n                    type: event.type,\n                    values: cloneObject(_formValues),\n                });\n            if (shouldSkipValidation) {\n                if (_proxyFormState.isValid || _proxySubscribeFormState.isValid) {\n                    if (_options.mode === 'onBlur') {\n                        if (isBlurEvent) {\n                            _setValid();\n                        }\n                    }\n                    else if (!isBlurEvent) {\n                        _setValid();\n                    }\n                }\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _runSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid ||\n                        _proxySubscribeFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _setValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                ((_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\n                    isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        error: get((formState || _formState).errors, name),\n        isValidating: !!get(_formState.validatingFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.state.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const _subscribe = (props) => _subjects.state.subscribe({\n        next: (formState) => {\n            if (shouldSubscribeByName(props.name, formState.name, props.exact) &&\n                shouldRenderFormState(formState, props.formState || _proxyFormState, _setFormState, props.reRenderRoot)) {\n                props.callback({\n                    values: { ..._formValues },\n                    ..._formState,\n                    ...formState,\n                });\n            }\n        },\n    }).unsubscribe;\n    const subscribe = (props) => {\n        _state.mount = true;\n        _proxySubscribeFormState = {\n            ..._proxySubscribeFormState,\n            ...props.formState,\n        };\n        return _subscribe({\n            ...props,\n            formState: _proxySubscribeFormState,\n        });\n    };\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.state.next({\n            values: cloneObject(_formValues),\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _setValid();\n    };\n    const _setDisabledField = ({ disabled, name, }) => {\n        if ((isBoolean(disabled) && _state.mount) ||\n            !!disabled ||\n            _names.disabled.has(name)) {\n            disabled ? _names.disabled.add(name) : _names.disabled.delete(name);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled) || isBoolean(_options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _setDisabledField({\n                disabled: isBoolean(options.disabled)\n                    ? options.disabled\n                    : _options.disabled,\n                name,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined\n                ? { disabled: options.disabled || _options.disabled }\n                : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist &&\n                e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _runSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        if (_names.disabled.size) {\n            for (const name of _names.disabled) {\n                set(fieldValues, name, undefined);\n            }\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _setValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                const fieldsToCheck = new Set([\n                    ..._names.mount,\n                    ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\n                ]);\n                for (const fieldName of Array.from(fieldsToCheck)) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                for (const fieldName of _names.mount) {\n                    setValue(fieldName, get(values, fieldName));\n                }\n            }\n            _formValues = cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.state.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            disabled: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!_options.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? {}\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : keepStateOptions.keepDirty\n                            ? _formState.dirtyFields\n                            : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect &&\n                    isFunction(fieldRef.select) &&\n                    fieldRef.select();\n            }\n        }\n    };\n    const _setFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    const methods = {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _subscribe,\n            _runSchema,\n            _focusError,\n            _getWatch,\n            _getDirty,\n            _setValid,\n            _setFieldArray,\n            _setDisabledField,\n            _setErrors,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _removeUnmounted,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        subscribe,\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n    return {\n        ...methods,\n        formControl: methods,\n    };\n}\n\nvar generateId = () => {\n    if (typeof crypto !== 'undefined' && crypto.randomUUID) {\n        return crypto.randomUUID();\n    }\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, rules, } = props;\n    const [fields, setFields] = React__default.useState(control._getFieldArray(name));\n    const ids = React__default.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React__default.useRef(fields);\n    const _name = React__default.useRef(name);\n    const _actioned = React__default.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    rules &&\n        control.register(name, rules);\n    useIsomorphicLayoutEffect(() => control._subjects.array.subscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n    }).unsubscribe, [control]);\n    const updateValues = React__default.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._setFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        !Array.isArray(get(control._fields, name)) &&\n            set(control._fields, name, undefined);\n        control._setFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._setFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._setFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React__default.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted) &&\n            !getValidationModes(control._options.reValidateMode).isOnSubmit) {\n            if (control._options.resolver) {\n                control._runSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._names.disabled, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.state.next({\n            name,\n            values: cloneObject(control._formValues),\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._setValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React__default.useEffect(() => {\n        !get(control._formValues, name) && control._setFieldArray(name);\n        return () => {\n            const updateMounted = (name, value) => {\n                const field = get(control._fields, name);\n                if (field && field._f) {\n                    field._f.mount = value;\n                }\n            };\n            control._options.shouldUnregister || shouldUnregister\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React__default.useCallback(swap, [updateValues, name, control]),\n        move: React__default.useCallback(move, [updateValues, name, control]),\n        prepend: React__default.useCallback(prepend, [updateValues, name, control]),\n        append: React__default.useCallback(append, [updateValues, name, control]),\n        remove: React__default.useCallback(remove, [updateValues, name, control]),\n        insert: React__default.useCallback(insert$1, [updateValues, name, control]),\n        update: React__default.useCallback(update, [updateValues, name, control]),\n        replace: React__default.useCallback(replace, [updateValues, name, control]),\n        fields: React__default.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React__default.useRef(undefined);\n    const _values = React__default.useRef(undefined);\n    const [formState, updateFormState] = React__default.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        isReady: false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        if (props.formControl) {\n            _formControl.current = {\n                ...props.formControl,\n                formState,\n            };\n            if (props.defaultValues && !isFunction(props.defaultValues)) {\n                props.formControl.reset(props.defaultValues, props.resetOptions);\n            }\n        }\n        else {\n            const { formControl, ...rest } = createFormControl(props);\n            _formControl.current = {\n                ...rest,\n                formState,\n            };\n        }\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useIsomorphicLayoutEffect(() => {\n        const sub = control._subscribe({\n            formState: control._proxyFormState,\n            callback: () => updateFormState({ ...control._formState }),\n            reRenderRoot: true,\n        });\n        updateFormState((data) => ({\n            ...data,\n            isReady: true,\n        }));\n        control._formState.isReady = true;\n        return sub;\n    }, [control]);\n    React__default.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React__default.useEffect(() => {\n        if (props.mode) {\n            control._options.mode = props.mode;\n        }\n        if (props.reValidateMode) {\n            control._options.reValidateMode = props.reValidateMode;\n        }\n    }, [control, props.mode, props.reValidateMode]);\n    React__default.useEffect(() => {\n        if (props.errors) {\n            control._setErrors(props.errors);\n            control._focusError();\n        }\n    }, [control, props.errors]);\n    React__default.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.state.next({\n                values: control._getWatch(),\n            });\n    }, [control, props.shouldUnregister]);\n    React__default.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React__default.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [control, props.values]);\n    React__default.useEffect(() => {\n        if (!control._state.mount) {\n            control._setValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, createFormControl, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],"names":["isCheckBoxInput","element","isDateObject","value","isNullOrUndefined","isObjectType","isObject","getEventValue","event","getNodeParentName","name","isNameInFieldArray","names","isPlainObject","tempObject","prototypeCopy","isWeb","cloneObject","data","copy","isArray","isFileListInstance","key","isKey","isUndefined","val","compact","stringToPath","input","get","object","path","defaultValue","result","isBoolean","set","index","tempPath","length","lastIndex","newValue","objValue","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","HookFormContext","React__default","useFormContext","FormProvider","props","children","getProxyFormState","formState","control","localProxyFormState","isRoot","_key","useIsomorphicLayoutEffect","React","useFormState","methods","disabled","exact","updateFormState","_localProxyFormState","isString","generateWatchOutput","_names","formValues","isGlobal","fieldName","useWatch","_defaultValue","updateValue","useController","shouldUnregister","isArrayField","_props","_registerProps","fieldState","onChange","onBlur","ref","elm","field","message","_shouldUnregisterField","updateMounted","Controller","appendErrors","validateAllFieldCriteria","errors","type","convertToArrayPayload","createSubject","_observers","observer","o","isPrimitive","deepEqual","object1","object2","keys1","keys2","val1","val2","isEmptyObject","isFileInput","isFunction","isHTMLElement","owner","isMultipleSelect","isRadioInput","isRadioOrCheckbox","live","baseGet","updatePath","isEmptyArray","obj","unset","paths","childObject","objectHasFunction","markFieldsDirty","fields","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultValues","defaultResult","validResult","getCheckboxValue","options","values","option","getFieldValueAs","valueAsNumber","valueAsDate","setValueAs","defaultReturn","getRadioValue","previous","getFieldValue","_f","getResolverOptions","fieldsNames","_fields","criteriaMode","shouldUseNativeValidation","isRegex","getRuleValue","rule","getValidationModes","mode","ASYNC_FUNCTION","hasPromiseValidation","fieldReference","validateFunction","hasValidation","isWatched","isBlurEvent","watchName","iterateFieldsByAction","action","abortEarly","currentField","schemaErrorLookup","error","foundError","shouldRenderFormState","formStateData","_proxyFormState","shouldSubscribeByName","signalName","currentName","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","updateFieldArrayRootError","fieldArrayErrors","isMessage","getValidateError","getValueAndMessage","validationData","validateField","disabledFieldNames","isFieldArray","refs","required","maxLength","minLength","min","max","pattern","validate","mount","inputValue","inputRef","setCustomValidity","isRadio","isCheckBox","isEmpty","appendErrorsCurry","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","valueDate","convertTimeToDate","time","isTime","isWeek","maxLengthOutput","minLengthOutput","patternValue","validateError","validationResult","defaultOptions","createFormControl","_options","_formState","_defaultValues","_formValues","_state","delayErrorCallback","timer","_proxySubscribeFormState","_subjects","shouldDisplayAllAssociatedErrors","debounce","callback","wait","_setValid","shouldUpdateValid","isValid","_runSchema","executeBuiltInValidation","_updateIsValidating","isValidating","_setFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","touchedFields","_getDirty","updateErrors","_setErrors","updateValidAndValue","shouldSkipSetValueAs","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","previousFieldError","updatedFormState","executeSchemaAndUpdateState","shouldOnlyCheckValid","context","isFieldArrayRoot","isPromiseFunction","fieldError","_removeUnmounted","unregister","getValues","_getWatch","_getFieldArray","optionRef","checkboxRef","radioRef","trigger","setValues","fieldKey","setValue","cloneValue","target","isFieldValueUpdated","_updateIsFieldValueUpdated","validationModeBeforeSubmit","validationModeAfterSubmit","shouldSkipValidation","watched","previousErrorLookupResult","errorLookupResult","_focusInput","fieldNames","getFieldState","clearErrors","inputName","setError","currentError","currentRef","restOfErrorTree","watch","payload","_subscribe","_setFormState","subscribe","_setDisabledField","register","disabledIsDefined","fieldRef","radioOrCheckbox","_focusError","_disableForm","handleSubmit","onValid","onInvalid","e","onValidError","resetField","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","fieldsToCheck","form","reset","setFocus","useForm","_formControl","_values","formControl","rest","sub","isDirty","state"],"mappings":"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","x_google_ignoreList":[0]}