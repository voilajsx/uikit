{"version":3,"file":"data-table.js","sources":["../src/components/ui/data-table.tsx"],"sourcesContent":["/**\n * Enhanced DataTable component with built-in search and sort functionality\n * @module @voilajsx/uikit\n * @file src/components/ui/data-table.tsx\n */\n\nimport * as React from 'react';\nimport { useState, useMemo } from 'react';\nimport { cn } from '@/lib/utils';\nimport { Input } from './input';\nimport { Button } from './button';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from './table';\nimport { ChevronDown, ChevronUp, Search } from 'lucide-react';\n\n/**\n * Column definition for DataTable\n */\nexport interface DataTableColumn<T = any> {\n  /** Unique key for the column (should match data property) */\n  key: string;\n  /** Display title for the column header */\n  title: string;\n  /** Whether this column is sortable */\n  sortable?: boolean;\n  /** Custom render function for the cell */\n  render?: (value: any, row: T) => React.ReactNode;\n}\n\n/**\n * DataTable component props\n */\nexport interface DataTableProps<T = any> {\n  /** Column definitions */\n  columns: DataTableColumn<T>[];\n  /** Table data */\n  data: T[];\n  /** Enable search functionality */\n  searchable?: boolean;\n  /** Enable sorting functionality */\n  sortable?: boolean;\n  /** Search placeholder text */\n  searchPlaceholder?: string;\n  /** Additional CSS classes */\n  className?: string;\n}\n\ntype SortDirection = 'asc' | 'desc' | null;\n\n/**\n * Enhanced DataTable with search and sort functionality\n */\nexport function DataTable<T = any>({\n  columns,\n  data,\n  searchable = true,\n  sortable = true,\n  searchPlaceholder = 'Search...',\n  className,\n}: DataTableProps<T>) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortColumn, setSortColumn] = useState<string | null>(null);\n  const [sortDirection, setSortDirection] = useState<SortDirection>(null);\n\n  // Filter data based on search term\n  const filteredData = useMemo(() => {\n    if (!searchable || !searchTerm.trim()) return data;\n\n    return data.filter((row) => {\n      return columns.some((column) => {\n        const value = (row as any)[column.key];\n        if (value == null) return false;\n        \n        return String(value)\n          .toLowerCase()\n          .includes(searchTerm.toLowerCase());\n      });\n    });\n  }, [data, searchTerm, columns, searchable]);\n\n  // Sort filtered data\n  const sortedData = useMemo(() => {\n    if (!sortable || !sortColumn || !sortDirection) return filteredData;\n\n    return [...filteredData].sort((a, b) => {\n      const aValue = (a as any)[sortColumn];\n      const bValue = (b as any)[sortColumn];\n\n      // Handle null/undefined values\n      if (aValue == null && bValue == null) return 0;\n      if (aValue == null) return sortDirection === 'asc' ? -1 : 1;\n      if (bValue == null) return sortDirection === 'asc' ? 1 : -1;\n\n      // Handle different data types\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        const comparison = aValue.localeCompare(bValue);\n        return sortDirection === 'asc' ? comparison : -comparison;\n      }\n\n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n\n      // Fallback to string comparison\n      const comparison = String(aValue).localeCompare(String(bValue));\n      return sortDirection === 'asc' ? comparison : -comparison;\n    });\n  }, [filteredData, sortColumn, sortDirection, sortable]);\n\n  // Handle column sort\n  const handleSort = (columnKey: string) => {\n    const column = columns.find(col => col.key === columnKey);\n    if (!column?.sortable) return;\n\n    if (sortColumn === columnKey) {\n      // Cycle through: asc -> desc -> null\n      if (sortDirection === 'asc') {\n        setSortDirection('desc');\n      } else if (sortDirection === 'desc') {\n        setSortDirection(null);\n        setSortColumn(null);\n      }\n    } else {\n      setSortColumn(columnKey);\n      setSortDirection('asc');\n    }\n  };\n\n  // Get sort icon for column\n  const getSortIcon = (columnKey: string) => {\n    if (sortColumn !== columnKey) return null;\n    if (sortDirection === 'asc') return <ChevronUp className=\"h-4 w-4\" />;\n    if (sortDirection === 'desc') return <ChevronDown className=\"h-4 w-4\" />;\n    return null;\n  };\n\n  return (\n    <div className={cn('space-y-4', className)}>\n      {/* Search Input */}\n      {searchable && (\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n          <Input\n            placeholder={searchPlaceholder}\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-9\"\n          />\n        </div>\n      )}\n\n      {/* Table */}\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              {columns.map((column) => (\n                <TableHead key={column.key}>\n                  {column.sortable && sortable ? (\n                    <Button\n                      variant=\"ghost\"\n                      className=\"h-auto p-0 font-semibold hover:bg-transparent\"\n                      onClick={() => handleSort(column.key)}\n                    >\n                      <span>{column.title}</span>\n                      <div className=\"ml-2 flex h-4 w-4 items-center justify-center\">\n                        {getSortIcon(column.key)}\n                      </div>\n                    </Button>\n                  ) : (\n                    <span className=\"font-semibold\">{column.title}</span>\n                  )}\n                </TableHead>\n              ))}\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {sortedData.length === 0 ? (\n              <TableRow>\n                <TableCell\n                  colSpan={columns.length}\n                  className=\"h-24 text-center text-muted-foreground\"\n                >\n                  {searchTerm ? 'No results found.' : 'No data available.'}\n                </TableCell>\n              </TableRow>\n            ) : (\n              sortedData.map((row, index) => (\n                <TableRow key={index}>\n                  {columns.map((column) => (\n                    <TableCell key={column.key}>\n                      {column.render\n                        ? column.render((row as any)[column.key], row)\n                        : String((row as any)[column.key] ?? '')}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n\n      {/* Results Info */}\n      {searchable && (\n        <div className=\"text-sm text-muted-foreground\">\n          Showing {sortedData.length} of {data.length} results\n          {searchTerm && ` for \"${searchTerm}\"`}\n        </div>\n      )}\n    </div>\n  );\n}"],"names":["DataTable","columns","data","searchable","sortable","searchPlaceholder","className","searchTerm","setSearchTerm","useState","sortColumn","setSortColumn","sortDirection","setSortDirection","filteredData","useMemo","row","column","value","sortedData","a","b","aValue","bValue","comparison","handleSort","columnKey","col","getSortIcon","jsx","ChevronUp","ChevronDown","cn","jsxs","Search","Input","Table","TableHeader","TableRow","TableHead","Button","TableBody","TableCell","index"],"mappings":"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"}