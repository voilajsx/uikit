import React, { useState } from 'react';
import { Button } from '@voilajsx/uikit/button';
import { Input } from '@voilajsx/uikit/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@voilajsx/uikit/card';
import { Badge } from '@voilajsx/uikit/badge';
import { Alert, AlertDescription } from '@voilajsx/uikit/alert';
import { PageLayout } from '@voilajsx/uikit/page';
import { useApi } from '@voilajsx/uikit/hooks';
import {
  ArrowLeft,
  Send,
  Server,
  User,
  Loader2,
  CheckCircle,
  XCircle,
  Code2
} from 'lucide-react';
import { Link } from 'react-router-dom';
import { Header, Footer, SEO } from '../../../shared/components';

interface WelcomeResponse {
  message: string;
  name?: string;
  timestamp: string;
}

export const WelcomePage: React.FC = () => {
  const [name, setName] = useState('');
  const [response, setResponse] = useState<WelcomeResponse | null>(null);
  const { loading, error, get } = useApi<WelcomeResponse>();

  const handleSendRequest = async () => {
    if (!name.trim()) return;

    try {
      const result = await get(`/api/welcome/${encodeURIComponent(name.trim())}`);
      setResponse(result);
    } catch (err) {
      // Error is handled by useApi hook
      setResponse(null);
    }
  };

  const handleGetBasicWelcome = async () => {
    try {
      const result = await get('/api/welcome');
      setResponse(result);
    } catch (err) {
      // Error is handled by useApi hook
      setResponse(null);
    }
  };

  return (
    <PageLayout>
      <SEO
        title="Welcome API Demo - Fullstack Integration"
        description="Demonstration of frontend-backend communication using UIKit and AppKit"
        keywords="api, fullstack, demo, integration, react, express"
      />
      <Header />

      <PageLayout.Content>
        <div className="max-w-4xl mx-auto space-y-8">
          {/* Header */}
          <div className="flex items-center gap-4">
            <Button variant="ghost" size="sm" asChild>
              <Link to="/">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Home
              </Link>
            </Button>
          </div>

          <div className="text-center space-y-4">
            <h1 className="text-4xl font-bold">Welcome API Demo</h1>
            <p className="text-muted-foreground text-lg max-w-2xl mx-auto">
              Live demonstration of frontend-backend communication using UIKit hooks and AppKit APIs
            </p>
          </div>

          {/* API Demo Cards */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Basic Welcome */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Server className="h-5 w-5" />
                  Basic Welcome
                </CardTitle>
                <CardDescription>
                  Get a simple welcome message from the backend
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <p className="text-sm text-muted-foreground">
                    <code className="bg-muted px-1 rounded">GET /api/welcome</code>
                  </p>
                  <Button
                    onClick={handleGetBasicWelcome}
                    disabled={loading}
                    className="w-full"
                  >
                    {loading ? (
                      <Loader2 className="h-4 w-4 animate-spin mr-2" />
                    ) : (
                      <Send className="h-4 w-4 mr-2" />
                    )}
                    Send Request
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Personalized Welcome */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <User className="h-5 w-5" />
                  Personalized Welcome
                </CardTitle>
                <CardDescription>
                  Send your name and get a personalized response
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <p className="text-sm text-muted-foreground">
                    <code className="bg-muted px-1 rounded">GET /api/welcome/:name</code>
                  </p>
                  <Input
                    placeholder="Enter your name..."
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    onKeyDown={(e) => e.key === 'Enter' && handleSendRequest()}
                  />
                  <Button
                    onClick={handleSendRequest}
                    disabled={loading || !name.trim()}
                    className="w-full"
                  >
                    {loading ? (
                      <Loader2 className="h-4 w-4 animate-spin mr-2" />
                    ) : (
                      <Send className="h-4 w-4 mr-2" />
                    )}
                    Send Request
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Response Display */}
          {(response || error) && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  {error ? (
                    <XCircle className="h-5 w-5 text-red-500" />
                  ) : (
                    <CheckCircle className="h-5 w-5 text-green-500" />
                  )}
                  API Response
                </CardTitle>
              </CardHeader>
              <CardContent>
                {error ? (
                  <Alert variant="destructive">
                    <AlertDescription>
                      <strong>Error:</strong> {error}
                      <br />
                      <span className="text-sm mt-2 block">
                        Make sure your backend is running with <code>npm run dev:api</code>
                      </span>
                    </AlertDescription>
                  </Alert>
                ) : response ? (
                  <div className="space-y-4">
                    <div className="bg-muted p-4 rounded-lg">
                      <div className="flex items-center gap-2 mb-2">
                        <Badge variant="default" className="bg-green-100 text-green-800">
                          200 OK
                        </Badge>
                        <span className="text-sm text-muted-foreground">
                          {new Date(response.timestamp).toLocaleString()}
                        </span>
                      </div>
                      <div className="font-mono text-sm bg-background p-3 rounded border">
                        <pre>{JSON.stringify(response, null, 2)}</pre>
                      </div>
                    </div>
                    <div className="text-center">
                      <p className="text-lg font-medium">{response.message}</p>
                      {response.name && (
                        <p className="text-muted-foreground">
                          Hello, {response.name}! ðŸ‘‹
                        </p>
                      )}
                    </div>
                  </div>
                ) : null}
              </CardContent>
            </Card>
          )}

          {/* Code Example */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Code2 className="h-5 w-5" />
                Implementation
              </CardTitle>
              <CardDescription>
                How this works - UIKit useApi hook calling AppKit backend
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="bg-muted p-4 rounded-lg font-mono text-sm overflow-x-auto">
                <pre>{`// Frontend (React)
import { useApi } from '@voilajsx/uikit/hooks';

const { loading, error, get } = useApi();
const result = await get('/api/welcome/John');

// Backend (Express + AppKit)
router.get('/:name', asyncRoute(async (req, res) => {
  const result = await welcomeService.getHelloWithName(req.params.name);
  res.json(result);
}));`}</pre>
              </div>
            </CardContent>
          </Card>

          {/* Navigation */}
          <div className="text-center py-8">
            <Button variant="outline" asChild>
              <Link to="/">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Home
              </Link>
            </Button>
          </div>
        </div>
      </PageLayout.Content>

      <Footer />
    </PageLayout>
  );
};